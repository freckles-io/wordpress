---
# tasks file for freckles-io.wordpress

- name: "installing role requirements"
  install:
    packages: "{{ item }}"
  with_items:
    - curl

- name: "[setting https related vars]"
  set_fact:
    apache_vhosts:
      - servername: "{{ wordpress_domain }}"
        allow_override: All
        extra_parameters: |
          Redirect / https://{{ wordpress_domain }}/
    apache_vhosts_ssl:
      - servername: "{{ wordpress_domain }}"
        documentroot: "{{ wordpress_wordpress_root }}"
        allow_override: All
        options: "+FollowSymLinks"
        certificate_file: "/etc/letsencrypt/live/{{ wordpress_domain }}/cert.pem"
        certificate_key_file: "/etc/letsencrypt/live/{{ wordpress_domain }}/privkey.pem"
        certificate_chain_file: "/etc/letsencrypt/live/{{ wordpress_domain }}/fullchain.pem"
    apache_listen_port_ssl: 443
    apache_mods_enabled:
      - rewrite.load
      - php7.0.load
      - ssl.load
    wp_site_url: "https://{{ wordpress_domain }}"
  when: wordpress_request_https_cert

- name: "[setting variables for non-https deployment]"
  set_fact:
    apache_vhosts:
      - servername: "{{ wordpress_domain }}"
        documentroot: "{{ wordpress_wordpress_root }}"
        options: "+FollowSymLinks"
        allow_override: All
    apache_mods_enabled:
      - rewrite.load
      - php7.0.load
    wp_site_url: "http://{{ wordpress_domain }}"
  when: not wordpress_request_https_cert

- name: "[setting wp_site_url if custom port]"
  set_fact:
    wp_site_url: "http://{{ wordpress_domain }}:{{ wordpress_port }}"
  when: "not wordpress_request_https_cert and wordpress_port != 80"

- name: "setting letsencrypt server to 'staging'"
  set_fact:
    letsencrypt_server: https://acme-staging.api.letsencrypt.org/directory
  when: wordpress_letsencrypt_staging

# TODO: maybe stop/start apache for letsencrypt request
- name: "managing https certificate for {{ wordpress_domain }}"
  include_role:
    name: thefinn93.letsencrypt
  vars:
    letsencrypt_webroot_path: "{{ wordpress_wordpress_root }}"
    letsencrypt_renewal_command_args: '--renew-hook "systemctl restart apache2"'

  when: wordpress_request_https_cert

- name: "[starting php role]"
  include_role:
    name: geerlingguy.php
  vars:
    php_enable_php_fpm: false
    php_fpm_pool_user: "{{ wordpress_webserver_user }}"
    php_packages_extra:
      - php-zip
      - php-curl
      - php-gd
      - php-mbstring
      - php-mcrypt
      - php-xml
      - php-xmlrpc
      - libapache2-mod-php
      - php-mysql
  become: true

- name: "[starting apache role]"
  include_role:
    name: geerlingguy.apache
  vars:
    apache_listen_ip: "*"
    apache_listen_port: "{{ wordpress_port }}"
    apache_create_vhosts: true
    apache_remove_default_vhost: true
    apache_user: "{{ wordpress_webserver_user }}"
    apache_group: "{{ wordpress_webserver_group | default(omit) }}"
  become: true

- name: "[check if wp config is empty]"
  stat:
    path: "{{ wordpress_config_file_path }}"
  register: wp_config_file


- name: "creating wordpress config"
  block:

    - command: curl http://api.wordpress.org/secret-key/1.1/salt/
      register: wp_salt
      no_log: true

    - set_fact:
        wordpress_config: |
          <?php
          define("DB_NAME", "{{ wp_db_name }}");
          define("DB_USER", "{{ wp_db_user }}");
          define("DB_PASSWORD", "{{ wp_db_password }}");
          define("DB_HOST", "{{ wp_db_host }}");
          define("DB_CHARSET", "utf8");
          define("DB_COLLATE", "");
          {{ wp_salt.stdout }}
          $table_prefix  = "{{ wp_table_prefix }}";
          define("WPLANG", "{{ wp_lang }}");
          define("WP_DEBUG", {{ wp_debug }});
          define("CONCATENATE_SCRIPTS", false);
          if (!defined("ABSPATH"))
           define("ABSPATH", dirname(__FILE__) . "/");
          require_once(ABSPATH . "wp-settings.php");
        no_log: true

    - copy:
        content: "{{ wordpress_config }}"
        dest: "{{ wordpress_config_file_path }}"
      become: true
      no_log: true

  when: wp_config_file.stat.size == 0

# - name: "setting wordpress home var in wp-config.php"
#   lineinfile:
#     path: "{{ wordpress_config_file_path }}"
#     regexp: '^define\("WP_HOME",'
#     line: "define(\"WP_HOME\", '{{ wp_site_url }}');"
#   become: true

# - name: "setting wordpress siteurl var in wp-config.php"
#   lineinfile:
#     path: "{{ wordpress_config_file_path }}"
#     regexp: '^define\("WP_SITEURL",'
#     line: "define(\"WP_SITEURL\", '{{ wp_site_url }}');"
#   become: true

# TODO: instead of ignoring error, probably better to check if table exists first
- name: "setting wordpress siteurl in mysql table"
  command: "mysql -u root -e \"update {{ wp_table_prefix }}options SET option_value = '{{ wp_site_url }}' where option_id = 1 and option_name = 'siteurl';\" {{ wp_db_name }}"
  ignore_errors: true
  become: true

- name: "setting wordpress home in mysql table"
  command: "mysql -u root -e \"update {{ wp_table_prefix }}options SET option_value = '{{ wp_site_url }}' where option_id = 2 and option_name = 'home';\" {{ wp_db_name }}"
  ignore_errors: true
  become: true

- name: "downloading and extracting wordpress"
  unarchive:
    src: https://wordpress.org/latest.tar.gz
    creates: "{{ wordpress_wordpress_root }}/wp-admin"
    dest: "{{ wordpress_webserver_root }}"
    owner: "{{ wordpress_webserver_user }}"
    group: "{{ wordpress_webserver_group }}"
    remote_src: yes
    keep_newer: yes
  become: true

# TODO: not sure why this is necessary anymore, maybe remove:
- name: "changing wordpress directory permissions"
  command: "find {{ wordpress_wordpress_root }} -type d -exec chmod 755 {} \\;"
  become: true

- name: "changing wordpress file permissions"
  command: "find {{ wordpress_wordpress_root }} -type f -exec chmod 644 {} \\;"
  become: true

- name: including docker-specific tasks
  include_tasks: wordpress_docker.yml
  when: wordpress_docker

- name: including vagrant-specific tasks
  include_tasks: wordpress_vagrant.yml
  when: wordpress_vagrant
